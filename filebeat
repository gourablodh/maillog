filebeat.inputs:
  - type: log
    enabled: true
    paths:
      - /var/log/mail.log


    # 1) First grok separates out the common “header” into log.timestamp, log.hostname,
    #    log.component, log.pid, and puts the rest of the line into log.rest.
    processors:
      - grok:
          field: "message"
          patterns:
            - '%{TIMESTAMP_ISO8601:log.timestamp} %{HOSTNAME:log.hostname} %{DATA:log.component}\[%{NUMBER:log.pid}\]: %{GREEDYDATA:log.rest}'
          ignore_missing: true
          ignore_failure: true

      # 2) pmg-smtp-filter lines
      #    a) “accept mail to <…> (QUEUE_ID) (rule: …)”
      #    b) “processing time: X.XXX seconds (…)"
      #    c) “SA score=… time=… hits=…”
      - grok:
          when:
            contains:
              log.component: "pmg-smtp-filter"
          field: "log.rest"
          patterns:
            # (2a) e.g. “8AAA6828B281679C7: accept mail to <root@mg.lbfinc.org> (5CDF1280D52) (rule: default-accept)”
            - '%{WORD:log.message_id}: accept mail to <%{DATA:log.receiver}> \(%{WORD:log.queue_id}\) \(rule: %{DATA:log.rule}\)'

            # (2b) e.g. “8AAA6828B281679C7: processing time: 2.008 seconds (1.914, 0.021, 0)”
            - '%{WORD:log.message_id}: processing time: %{NUMBER:log.proc_seconds} seconds \(%{GREEDYDATA:log.proc_breakdown}\)'

            # (2c) e.g. “8AAA6828B281679C7: SA score=0/5 time=1.914 bayes=0.00 autolearn ham … hits=AWL(0.003), BAYES_00(-1.9), …”
            - '%{WORD:log.message_id}: SA score=%{NUMBER:log.sa_score}/%{NUMBER:log.sa_threshold} time=%{NUMBER:log.sa_time} %{GREEDYDATA:log.sa_hits}'

          ignore_missing: true
          ignore_failure: true


      # 3) postfix/* lines
      #    a) “<QUEUE_ID>: from=<SENDER>, size=<SIZE>, nrcpt=<NRCPT> (queue active)”
      #    b) “<QUEUE_ID>: to=<RECEIVER>, relay=<RELAY>[<RELAY_IP>]:<RELAY_PORT>, delay=<DELAY>, delays=<DELAYS>, dsn=<DSN>, status=<STATUS> (<STATUS_MSG>)”
      #    c) “<QUEUE_ID>: removed”
      #    d) “<QUEUE_ID>: message-id=<MSGID>” (cleanup lines)
      #    e) “connect from <CLIENT_HOST> [<CLIENT_IP>]”
      #    f) “disconnect from <CLIENT_HOST> [<CLIENT_IP>] …”
      #    g) “<QUEUE_ID>: client=<CLIENT_HOST> [<CLIENT_IP>]”
      #    h) “Trusted TLS connection established to <HOST> [<IP>]:<PORT>: <TLS_DETAILS>”
      #    i) “warning: hostname <HOST> does not resolve to address <IP>: <MSG>”
      - grok:
          when:
            contains:
              log.component: "postfix"
          field: "log.rest"
          patterns:
            # (3a) e.g. “5CDF1280D52: from=<root@mg.lbfinc.org>, size=1665, nrcpt=1 (queue active)”
            - '%{WORD:log.queue_id}: from=<%{EMAIL:log.sender}>, size=%{NUMBER:log.size}, nrcpt=%{NUMBER:log.nrcpt} \(%{DATA:log.queue_status}\)'

            # (3b) e.g. “9B4F9281BDB: to=<dmarc-reports@heteml.jp>, relay=127.0.0.1[127.0.0.1]:10023, delay=0.18, delays=0.01/0/0.04/0.12, dsn=2.5.0, status=sent (250 2.5.0 OK (2878D76828B28EA82A2))”
            - '%{WORD:log.queue_id}: to=<%{EMAIL:log.receiver}>, relay=%{HOSTNAME:log.relay}\[%{IP:log.relay_ip}\]:%{NUMBER:log.relay_port}, delay=%{NUMBER:log.delay}, delays=%{DATA:log.delays}, dsn=%{DATA:log.dsn}, status=%{WORD:log.status} \(%{GREEDYDATA:log.status_msg}\)'

            # (3c) e.g. “9B4F9281BDB: removed”
            - '%{WORD:log.queue_id}: removed'

            # (3d) e.g. “5CDF1280D52: message-id=<20250517160001.4EF5B480B43@mg.lbfinc.org>”
            - '%{WORD:log.queue_id}: message-id=<%{DATA:log.message_id}>'

            # (3e) e.g. “connect from localhost.localdomain [127.0.0.1]”
            - 'connect from %{DATA:log.client_host} \[%{IP:log.client_ip}\]'

            # (3f) e.g. “disconnect from localhost.localdomain [127.0.0.1] ehlo=1 mail=1 rcpt=1 data=1 commands=4”
            - 'disconnect from %{DATA:log.client_host} \[%{IP:log.client_ip}\] %{GREEDYDATA:log.disconnect_details}'

            # (3g) e.g. “5CDF1280D52: client=localhost.localdomain [127.0.0.1]”
            - '%{WORD:log.queue_id}: client=%{DATA:log.client_host} \[%{IP:log.client_ip}\]'

            # (3h) e.g. “Trusted TLS connection established to mail.lbfinc.org [192.168.150.23]:25: TLSv1.3 with cipher …”
            - 'Trusted TLS connection established to %{DATA:log.tls_remote_host} \[%{IP:log.tls_ip}\]:%{NUMBER:log.tls_port}: %{GREEDYDATA:log.tls_details}'

            # (3i) e.g. “warning: hostname host.9.static.lbfinc.org does not resolve to address 210.14.16.248: Name or service not known”
            - 'warning: hostname %{DATA:log.warn_host} does not resolve to address %{IP:log.warn_ip}: %{GREEDYDATA:log.warn_message}'
          ignore_missing: true
          ignore_failure: true


      # 4) postfix/postscreen lines
      #    a) “CONNECT from [<IP>]:<PORT> to [<IP>]:<PORT>”
      #    b) “PASS OLD [<IP>]:<PORT>”
      - grok:
          when:
            contains:
              log.component: "postfix/postscreen"
          field: "log.rest"
          patterns:
            # (4a) “CONNECT from [210.14.16.248]:59550 to [192.168.150.3]:25”
            - 'CONNECT from \[%{IP:log.client_ip}\]:%{NUMBER:log.client_port} to \[%{IP:log.server_ip}\]:%{NUMBER:log.server_port}'

            # (4b) “PASS OLD [210.14.16.248]:59550”
            - 'PASS OLD \[%{IP:log.client_ip}\]:%{NUMBER:log.client_port}'
          ignore_missing: true
          ignore_failure: true

 
      # 5) postfix/scache lines
      #    a) “statistics: start interval May 17 23:51:57”
      #    b) “statistics: domain lookup hits=0 miss 2561 success=0%”
      #    c) “statistics: address lookup hits=0 miss=3981 success=0%”
      - grok:
          when:
            contains:
              log.component: "postfix/scache"
          field: "log.rest"
          patterns:
            # (5a)
            - 'statistics: start interval %{GREEDYDATA:log.scache_interval}'

            # (5b)
            - 'statistics: domain lookup hits=%{NUMBER:log.domain_hits} miss %{NUMBER:log.domain_miss} success=%{NUMBER:log.domain_success}%'

            # (5c)
            - 'statistics: address lookup hits=%{NUMBER:log.address_hits} miss %{NUMBER:log.address_miss} success=%{NUMBER:log.address_success}%'
          ignore_missing: true
          ignore_failure: true

   
      # 6) pmgpolicy lines (simple warnings or “Received a SIG HUP”)
      - grok:
          when:
            contains:
              log.component: "pmgpolicy"
          field: "log.rest"
          patterns:
            # (6a) “Received a SIG HUP”
            - 'Received a SIG HUP'

            # (6b) any other policy‐daemon message
            - '%{GREEDYDATA:log.policy_message}'
          ignore_missing: true
          ignore_failure: true

  
      # 7) Always keep the original unparsed line under log.original (useful for debugging).
      - rename:
          fields:
            - from: "message"
              to: "log.original"

      # 8) Drop fields you no longer need (the unparsed “log.rest” and the raw “message”).
      - drop_fields:
          fields:
            - "log.rest"
            - "message"
